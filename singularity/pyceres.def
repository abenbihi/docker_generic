BootStrap: docker
#From: nvidia/cudagl:11.3.1-devel-ubuntu20.04
#From: nvidia/cudagl:11.3.1-devel
#From: nvidia/cudagl:11.8.0-devel-ubuntu22.04
From: nvidia/cuda:11.8.0-devel-ubuntu22.04

%environment
  ## Set non-interactive to prevent asking for user inputs blocking image creation.
  export DEBIAN_FRONTEND=noninteractive

  ## Set timezone as it is required by some packages.
  export TZ=Europe/Berlin

  ## CUDA architectures, required by tiny-cuda-nn.
  export TCNN_CUDA_ARCHITECTURES=80

  ## CUDA Home, required to find CUDA in some packages.
  export CUDA_HOME="/usr/local/cuda"

  export PATH="$PATH":/usr/local/cuda-11.8/bin

%post
## Set non-interactive to prevent asking for user inputs blocking image creation.
export DEBIAN_FRONTEND=noninteractive

## Set timezone as it is required by some packages.
export TZ=Europe/Berlin

## CUDA architectures, required by tiny-cuda-nn.
export TCNN_CUDA_ARCHITECTURES=80

export CUDA_ARCHITECTURES=80

## CUDA Home, required to find CUDA in some packages.
export CUDA_HOME="/usr/local/cuda"

apt-get update && \
  apt-get install -y --no-install-recommends \
  build-essential \
  cmake \
  curl \
  ffmpeg \
  git \
  libatlas-base-dev \
  libboost-filesystem-dev \
  libboost-graph-dev \
  libboost-program-options-dev \
  libboost-system-dev \
  libboost-test-dev \
  libcgal-dev \
  libeigen3-dev \
  libflann-dev \
  libfreeimage-dev \
  libgflags-dev \
  libglew-dev \
  libgoogle-glog-dev \
  libgtest-dev \
  libhdf5-dev \
  libsqlite3-dev \
  libmetis-dev \
  libprotobuf-dev \
  libqt5opengl5-dev \
  libsuitesparse-dev \
  nano \
  ninja-build \
  protobuf-compiler \
  python-is-python3 \
  python3-minimal \
  python3.10-dev \
  python3-setuptools \
  python3-pip \
  qtbase5-dev \
  unzip \
  vim \
  wget && \
  rm -rf /var/lib/apt/lists/*

export PATH="$PATH":/usr/local/cuda-11.8/bin
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH":/usr/local/cuda-11.8/lib64$:/usr/lib/x86_64-linux-gnu/:/usr/local/cuda-11.8/targets/x86_64-linux/lib/stubs/


## Install GLOG (required by ceres).
#mkdir /build/ && \
#cd /build && \
#git clone --branch v0.6.0 https://github.com/google/glog.git --single-branch && \
#    cd glog && \
#    mkdir build && \
#    cd build && \
#    cmake .. && \
#    make -j8 && \
#    make install && \
#    cd ../.. && \
#    rm -r glog

#export LD_LIBRARY_PATH="$LD_LIBRARY_PATH":/usr/local/lib

# Install Ceres-solver (required by colmap).
mkdir /build/ && \
cd /build && \
git clone --branch 2.1.0 https://ceres-solver.googlesource.com/ceres-solver.git --single-branch && \
    cd ceres-solver && \
    git checkout $(git describe --tags) && \
    mkdir build && \
    cd build && \
    cmake .. -DBUILD_TESTING=OFF -DBUILD_EXAMPLES=OFF && \
    make -j8 && \
    make install && \
    cd ../.. && \
    rm -r ceres-solver

# Build pyceres.
cd /build && \
git clone https://github.com/cvg/pyceres.git && \
cd pyceres && \
#pip3 install . -vv --config-settings=cmake.define.CMAKE_CUDA_ARCHITECTURES=${CUDA_ARCHITECTURES}
pip3 install . -vv --install-option=cmake.define.CMAKE_CUDA_ARCHITECTURES=${CUDA_ARCHITECTURES}
